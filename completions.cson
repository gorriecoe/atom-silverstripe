######
#
# Silverstripe
#
######

# Template scope
'Loop':
  'prefix': 'loop'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'variations': [
    {
      'minVersion': '3.0'
      'body': """
      <% loop ${1} %>
      \t${2}
      <% end_loop %>
      """
    }
    {
      'maxVersion': '3.0'
      'body': """
      <% control ${1} %>
      \t${2}
      <% end_control %>
      """
    }
  ]

'With':
  'prefix': 'with'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'variations': [
    {
      'minVersion': '3.0'
      'body': """
      <% with ${1} %>
      \t${2}
      <% end_with %>
      """
    }
    {
      'maxVersion': '3.0'
      'body': """
      <% control ${1} %>
      \t${2}
      <% end_control %>
      """
    }
  ]

# Template conditional logic
'if':
  'prefix': 'if'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': """
  <% if ${1} %>
  \t${2}
  <% end_if %>
  """

'if not':
  'prefix': 'ifnot'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': """
  <% if not ${1} %>
  \t${2}
  <% end_if %>
  """

'if else':
  'prefix': 'ifelse'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': """
  <% if ${1} %>
  \t${2}
  <% else %>
  \t${3}
  <% end_if %>
  """

'else':
  'prefix': 'else'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': '<% else %>\n\t${0}'

# Template scope & conditional logic
'if Loop':
  'prefix': 'loopif'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'variations': [
    {
      'minVersion': '3.0'
      'body': """
      <% if ${1} %>
      \t<% loop ${1} %>
      \t\t${2}
      \t<% end_loop %>
      <% end_if %>
      """
    }
    {
      'maxVersion': '3.0'
      'body': """
      <% if ${1} %>
      \t<% control ${1} %>
      \t\t${2}
      \t<% end_control %>
      <% end_if %>
      """
    }
  ]
'if With':
  'prefix': 'withif'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'variations': [
    {
      'minVersion': '3.0'
      'body': """
      <% if ${1} %>
      \t<% with ${1} %>
      \t\t${2}
      \t<% end_with %>
      <% end_if %>
      """
    }
    {
      'maxVersion': '3.0'
      'body': """
      <% if ${1} %>
      \t<% control ${1} %>
      \t\t${2}
      \t<% end_control %>
      <% end_if %>
      """
    }
  ]

'Include':
  'prefix': 'include'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': '<% include ${1} %>${0}'

'Base Tag':
  'prefix': 'basetag'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': '<% base_tag %>${0}'

# Requirements
'Require themed javascript':
  'prefix': 'requirethemedjs'
  'module': 'silverstripe/framework'
  'minVersion': '3.5'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': '<% require themedJavascript(\'${1}\') %>${0}'
    }
    {
      'scope': '.text.html.php'
      'body': 'Requirements::themedJavascript(\'${1}\');${0}'
    }
  ]

'Require themed CSS':
  'prefix': 'requirethemedcss'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': '<% require themedCSS(\'${1}\') %>${0}'
    }
    {
      'scope': '.text.html.php'
      'body': 'Requirements::themedCSS(\'${1}\');${0}'
    }
  ]

'Require Javascript':
  'prefix': 'requirejavascript'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': '<% require javascript(\'${1}\') %>${0}'
    }
    {
      'scope': '.text.html.php'
      'body': 'Requirements::javascript(\'${1}\');${0}'
    }
  ]

'Require CSS':
  'prefix': 'requirecss'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': '<% require css(\'${1}\') %>${0}'
    }
    {
      'scope': '.text.html.php'
      'body': 'Requirements::css(\'${1}\');${0}'
    }
  ]

'Requirement block':
  'prefix': 'requireblock'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'Requirements::block(\'${1}\');${0}'

'Theme directory':
  'prefix': 'themedir'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'ThemeDir'
    }
    {
      'scope': '.text.html.php'
      'body': '$this->ThemeDir()'
    }
  ]

'Class Page & Controller Silverstripe':
  'prefix': 'classpageandcontroller'
  'module': 'silverstripe/cms'
  'minVersion': '3.0'
  'maxVersion': '4.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * ${3:Description}
   *
   * @package silverstripe
   * @subpackage ${4:mysite}
   */
  class $1 extends ${2:Page}
  {
  \t${0}
  }
  class ${1}_Controller extends ${2:Page}_Controller
  {
  \tpublic function init()
  \t{
  \t\tparent::init();
  \t}
  }
  """

'Class Page Silverstripe':
  'prefix': 'classpage'
  'module': 'silverstripe/cms'
  'minVersion': '4.0'
  'scope': '.text.html.php'
  'body': """
  use SilverStripe\\\\CMS\\\\Model\\\\SiteTree;

  /**
   * ${3:Description}
   *
   * @package silverstripe
   * @subpackage ${4:mysite}
   */
  class $1 extends ${2:Page}
  {
  \t${0}
  }
  """

'Class Page Controller Silverstripe':
  'prefix': 'classpagecontroller'
  'module': 'silverstripe/cms'
  'minVersion': '4.0'
  'scope': '.text.html.php'
  'body': """
  use SilverStripe\\\\CMS\\\\Controllers\\\\ContentController;

  /**
   * ${3:Description}
   *
   * @package silverstripe
   * @subpackage ${4:mysite}
   */
  class ${1}Controller extends ${2:Page}Controller
  {
  \tpublic function init()
  \t{
  \t\tparent::init();
  \t}
  }
  """

'Class DataObject Silverstripe':
  'prefix': 'classdataobject'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * ${3:Description}
     *
     * @package silverstripe
     * @subpackage ${4:mysite}
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      use SilverStripe\\\\ORM\\\\DataObject;

      {{comment}}
      class ${1} extends ${2:DataObject}
      {
      \t${0}
      }
      """
    }
    {
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      class ${1} extends ${2:DataObject}
      {
      \t${0}
      }
      """
    }
  ]


'Class Model Admin Silverstripe':
  'prefix': 'classmodeladmin'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      /**
       * ${5:Description}
       *
       * @package silverstripe
       * @subpackage ${6:mysite}
       */
      class ${1}Admin extends ModelAdmin
      {
      \t/**
      \t * Managed data objects for CMS
      \t * @var array
      \t */
      \tprivate static \\$managed_models = [
      \t\t\'${2}\'
      \t];

      \t/**
      \t * URL Path for CMS
      \t * @var string
      \t */
      \tprivate static \\$url_segment = \'${3}\';

      \t/**
      \t * Menu title for Left and Main CMS
      \t * @var string
      \t */
      \tprivate static \\$menu_title = \'${4}\';

      \t${0}
      }
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      /**
       * ${5:Description}
       *
       * @package silverstripe
       * @subpackage ${6:mysite}
       */
      class ${1}Admin extends ModelAdmin
      {
      \t/**
      \t * Managed data objects for CMS
      \t * @var array
      \t */
      \tprivate static \\$managed_models = array(
      \t\t\'${2}\'
      \t);

      \t/**
      \t * URL Path for CMS
      \t * @var string
      \t */
      \tprivate static \\$url_segment = \'${3}\';

      \t/**
      \t * Menu title for Left and Main CMS
      \t * @var string
      \t */
      \tprivate static \\$menu_title = \'${4}\';

      \t${0}
      }
      """
    }
  ]

'Class BuildTask Silverstripe':
  'prefix': 'classtask'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  /**
   * ${3:Description}
   *
   * @package silverstripe
   * @subpackage ${4:mysite}
   */
  class ${1} extends BuildTask
  {
  \t/**
  \t * @var bool $enabled If set to FALSE, keep it from showing in the list
  \t * and from being executable through URL or CLI.
  \t */
  \tprotected $enabled = true;
  \t
  \t/**
  \t * @var string $title Shown in the overview on the TaskRunner
  \t * HTML or CLI interface. Should be short and concise, no HTML allowed.
  \t */
  \tprotected $title = \'${2:${1}}\';
  \t
  \t/**
  \t * @var string $description Describe the implications the task has,
  \t * and the changes it makes. Accepts HTML formatting.
  \t */
  \tprotected $description = \'${3}\';

  \t/**
  \t * This method called via the TaskRunner
  \t *
  \t * @param SS_HTTPRequest $request
  \t */
  \tpublic function run($request)
  \t{
  \t\t${0}
  \t}
  }
  """

'menu_title':
  'prefix': 'menu_title'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * Menu title for Left and Main CMS
   * @var string
   */
  private static \\$menu_title = \'${1}\';${0}
  """

'menu_icon':
  'prefix': 'menu_icon'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * Menu icon for Left and Main CMS
   * @var string
   */
  private static \\$menu_icon = \'${1}\';${0}
  """

'extensions':
  'prefix': 'extensions'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Defines extension names and parameters to be applied
     * to this object upon construction.
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static $extensions = [
      \t\'${1}\',
      ];${0}
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static $extensions = array(
      \t\'${1}\',
      );${0}
      """
    }
  ]

'singular_name':
  'prefix': 'singular_name'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * Singular name for CMS
   * @var string
   */
  private static \\$singular_name = \'${1}\';${0}
  """

'plural_name':
  'prefix': 'plural_name'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * Plural name for CMS
   * @var string
   */
  private static \\$plural_name = \'${1}\';${0}
  """

'table_name':
  'prefix': 'table_name'
  'module': 'silverstripe/framework'
  'minVersion': '4.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * Defines the database table name
   * @var string
   */
  private static \\$table_name = \'${1}\';${0}
  """

'db':
  'prefix': 'db'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Database fields
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$db = [
      \t\'${1}\' => \'${2}\',
      ];${0}
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$db = array(
      \t\'${1}\' => \'${2}\',
      );${0}
      """
    }
  ]

'dbindexes':
  'prefix': 'dbindexes'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Database indexes
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$indexes = [
      \t\'${1}\' => \'${2}\',
      ];${0}
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$indexes = array(
      \t\'${1}\' => \'${2}\',
      );${0}
      """
    }
  ]

'has_one':
  'prefix': 'has_one'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Has_one relationship
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$has_one = [
      \t\'${1}\' => \'${2}\',
      ];${0}
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$has_one = array(
      \t\'${1}\' => \'${2}\',
      );${0}
      """
    }
  ]

'has_many':
  'prefix': 'has_many'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Has_many relationship
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$has_many = [
      \t\'${1}\' => \'${2}\',
      ];${0}
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$has_many = array(
      \t\'${1}\' => \'${2}\',
      );${0}
      """
    }
  ]

'many_many':
  'prefix': 'many_many'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Many_many relationship
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$many_many = [
      \t\'${1}\' => \'${2}\',
      ];${0}
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$many_many = array(
      \t\'${1}\' => \'${2}\',
      );${0}
      """
    }
  ]

'many_many_extraFields':
  'prefix': 'many_many_extrafields'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Defines Database fields for the Many_many bridging table
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$many_many_extraFields = [
      \t\'${1}\' => [
      \t\t\'${2:Sort}\' => \'${3:Int}\'
      \t]
      ];${0}
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$many_many_extraFields = array(
      \t\'${1}\' => array(
      \t\t\'${2:Sort}\' => \'${3:Int}\'
      \t)
      );${0}
      """
    }
  ]

'belongs_to':
  'prefix': 'belongs_to'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Belongs_to relationship
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$belongs_to = [
      \t\'${1}\' => \'${2}\',
      ];
      ${0}
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$belongs_to = array(
      \t\'${1}\' => \'${2}\',
      );
      ${0}
      """
    }
  ]

'belongs_many_many':
  'prefix': 'belongs_many_many'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Belongs_many_many relationship
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$belongs_many_many = [
      \t\'${1}\' => \'${2}\',
      ];${0}
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$belongs_many_many = array(
      \t\'${1}\' => \'${2}\',
      );${0}
      """
    }
  ]

'casting':
  'prefix': 'casting'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Belongs_to relationship
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$casting = [
      \t\'${1}\' => \'${2}\'
      ];
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$casting = array(
      \t\'${1}\' => \'${2}\'
      );
      """
    }
  ]

'defaults':
  'prefix': 'defaults'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Belongs_to relationship
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$defaults = [
      \t\'${1}\' => \'${2}\'
      ];
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$defaults = array(
      \t\'${1}\' => \'${2}\'
      );
      """
    }
  ]


'default_sort':
  'prefix': 'default_sort'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      /**
       * Default sort ordering
       * @var array
       */
      private static \\$default_sort = [\'${1}\' => \'${2:ASC}\'];${0}
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      /**
       * Default sort ordering
       * @var string
       */
      private static \\$default_sort = \'${1} ${2:ASC}\';${0}
      """
    }
  ]

'allowed_children':
  'prefix': 'allowed_children'
  'module': 'silverstripe/cms'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Defines the allowed child page types
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static $allowed_children = [
      \t\'${1}\'
      ];
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static $allowed_children = array(
      \t\'${1}\'
      );
      """
    }
  ]

'can_be_root':
  'prefix': 'can_be_root'
  'module': 'silverstripe/cms'
  'scope': '.text.html.php'
  'body': """
  /**
   * Defines whether a page can be in the root of the site tree
   * @var boolean
   */
  private static $can_be_root = ${1:false};
  """

'allowed_actions':
  'prefix': 'allowed_actions'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Defines methods that can be called directly
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static $allowed_actions = [
      \t\'${1}\' => ${2:true}
      ];
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static $allowed_actions = array(
      \t\'${1}\' => ${2:true}
      );
      """
    }
  ]

'url_handlers':
  'prefix': 'url_handlers'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Defines URL patterns.
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static $url_handlers = [
      \t\'${1}\' => \'${2}\'
      ];
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static $url_handlers = array(
      \t\'${1}\' => \'${2}\'
      );
      """
    }
  ]

'hide_ancestor':
  'prefix': 'hide_ancestor'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * If you extend a class, and don't want to be able to select
   * the old class in the cms, set this to the old class name.
   * @var string
   */
  private static \\$hide_ancestor = \'\${1:PageType}\';${0}
  """

# Scaffolding
'summary_fields':
  'prefix': 'summary_fields'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
    /**
     * Defines summary fields commonly used in table columns
     * as a quick overview of the data for this dataobject
     * @var array
     */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$summary_fields = [
      \t'${1}' => '${2}'
      ];
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$summary_fields = array(
      \t'${1}' => '${2}'
      );
      """
    }
  ]

'searchable_fields':
  'prefix': 'searchable_fields'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'definitions': {
    'comment': """
      /**
       * Defines a default list of filters for the search context
       * @var array
       */
    """
  }
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$searchable_fields = [
      \t'${1}' => '${2}'
      ];
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      {{comment}}
      private static \\$searchable_fields = array(
      \t'${1}' => '${2}'
      );
      """
    }
  ]

# translate
'Main translator function':
  'prefix': '_t'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.ss, .text.html.php'
  'body': '_t(${1}, ${2})${0}'

# Events
'onBeforeWrite':
  'prefix': 'onbeforewrite'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  /**
   * Event handler called before writing to the database.
   */
  public function onBeforeWrite()
  {
  \tparent::onBeforeWrite();
  \t${0}
  }
  """

'onAfterWrite':
  'prefix': 'onafterwrite'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  /**
   * Event handler called after writing to the database.
   */
  public function onAfterWrite()
  {
  \tparent::onAfterWrite();
  \t${0}
  }
  """

'onBeforeDelete':
  'prefix': 'onbeforedelete'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  /**
   * Event handler called before deleting from the database.
   */
  public function onBeforeDelete()
  {
  \tparent::onBeforeDelete();
  \t${0}
  }
  """
'onAfterDelete':
  'prefix': 'onafterdelete'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  /**
   * Event handler called after deleting from the database.
   */
  public function onAfterDelete()
  {
  \tparent::onAfterDelete();
  \t${0}
  }
  """

# Permissions
'canView':
  'prefix': 'canview'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * DataObject view permissions
   * @param Member \\$member
   * @return boolean
   */
  public function canView(\\$member = null)
  {
  \treturn ${1};
  }${0}
  """

'canEdit':
  'prefix': 'canedit'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * DataObject edit permissions
   * @param Member \\$member
   * @return boolean
   */
  public function canEdit(\\$member = null)
  {
  \treturn ${1};
  }${0}
  """

'canDelete':
  'prefix': 'candelete'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * DataObject delete permissions
   * @param Member \\$member
   * @return boolean
   */
  public function canDelete(\\$member = null)
  {
  \treturn ${1};
  }${0}
  """

'canCreate':
  'prefix': 'cancreate'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      /**
       * DataObject create permissions
       * @param Member \\$member
       * @param array \\$context Additional context-specific data which might
       * affect whether (or where) this object could be created.
       * @return boolean
       */
      public function canCreate(\\$member = null, \\$context = [])
      {
      \treturn ${1};
      }${0}
      """
    }
    {
      'maxVersion': '4.0'
      'body': """
      /**
       * DataObject create permissions
       * @param Member \\$member
       * @return boolean
       */
      public function canCreate(\\$member = null)
      {
      \treturn ${1};
      }${0}
      """
    }
  ]

'permissionCheck':
  'prefix': 'permissioncheck'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'body': 'Permission::check(${1:string|array}, ${2:\'any\'}, ${3:$member})${0}'

'providePermissions':
  'prefix': 'providepermissions'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'scope': '.text.html.php'
  'body': """
  /**
   * Return a map of permission codes to add to the dropdown shown in the Security section of the CMS
   * @return array
   */
  public function providePermissions()
  {
  \treturn array(
  \t\t'${1:PERMISSION}' => '${2:Title}'
  \t);
  }
  """

'<?php …':
  'prefix': 'php' # Overrides standard php to exclude ?>
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': '\<?php\n${0}'

# Debug Tools
'Debug message':
  'prefix': 'message'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'Debug::message(${1});${0}'

'Debug show':
  'prefix': 'show'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'Debug::show(${1});${0}'

'Debug log':
  'prefix': 'log'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'Debug::log(${1});${0}'

'Debug dump':
  'prefix': 'dump '
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'Debug::dump(${1});${0}'

#  Tabs
'addFieldToTab':
  'prefix': 'addfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  addFieldToTab(
  \t\'${1:Root.Main}\',
  \t${0},
  \t\'${3:insertBefore}\'
  );
  """

'addFieldsToTab':
  'prefix': 'addfields'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      addFieldsToTab(
      \t\'${1:Root.Main}\',
      \t[
      \t\t${0}
      \t]
      );
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      addFieldsToTab(
      \t\'${1:Root.Main}\',
      \tarray(
      \t\t${0}
      \t)
      );
      """
    }
  ]

'removeByName':
  'prefix': 'removebyname'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'variations': [
    {
      'minVersion': '4.0'
      'body': """
      removeByName([
      \t\'${0}\'
      ]);
      """
    }
    {
      'minVersion': '3.0'
      'maxVersion': '4.0'
      'body': """
      removeByName(array(
      \t\'${0}\'
      ));
      """
    }
  ]

'getCMSFields':
  'prefix': 'getcmsfields'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  /**
   * CMS Fields
   * @return FieldList
   */
  public function getCMSFields()
  {
  \t\\$fields = parent::getCMSFields();
  \t\\$fields->${0}
  \t\\$this->extend('updateCMSFields', \\$fields);
  \treturn \\$fields;
  }
  """

'getSettingsFields':
  'prefix': 'getsettingsfields'
  'module': 'silverstripe/cms'
  'scope': '.text.html.php'
  'body': """
  /**
   * Settings Tab Fields
   * @return FieldList
   */
  public function getSettingsFields()
  {
  \t\\$fields = parent::getSettingsFields();
  \t\\$fields->${0}
  \t\\$this->extend('updateSettingsFields', \\$fields);
  \treturn \\$fields;
  }
  """

'updateCMSFields':
  'prefix': 'updatecmsfields'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  /**
   * Update Fields
   * @return FieldList
   */
  public function updateCMSFields(FieldList \\$fields)
  {
  \t\\$owner = $this->owner;
  \t\\$fields->${0}
  \treturn \\$fields;
  }
  """

'getEditForm':
  'prefix': 'geteditform'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  /**
   * @param Int $id
   * @param FieldList $fields
   * @return Form
   */
  public function getEditForm($id = null, $fields = null)
  {
  \t\\$form = parent::getEditForm($id, $fields);
  \t${0}
  \treturn \\$form;
  }
  """

#  Fields
'setAttribute':
  'prefix': 'setattribute'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setAttribute(\'${1}\', \'${2}\')${0}'

'setValue':
  'prefix': 'setvalue'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setValue(${1})${0}'

'setName':
  'prefix': 'setname'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setName(\'${1}\')${0}'

'setTitle':
  'prefix': 'settitle'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setTitle(\'${1}\')${0}'

'setRightTitle':
  'prefix': 'setrighttitle'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setRightTitle(\'${1}\')${0}'

'setLeftTitle':
  'prefix': 'setlefttitle'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setLeftTitle(\'${1}\')${0}'

'setDescription':
  'prefix': 'setdescription'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setDescription(\'${1}\')${0}'

'addExtraClass':
  'prefix': 'addextraclass'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'addExtraClass(\'${1}\')${0}'

'removeExtraClass':
  'prefix': 'removeextraclass'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'removeExtraClass(\'${1}\')${0}'

'Required':
  'prefix': 'required'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'Required()${0}'

'HTMLEditorField':
  'prefix': 'htmlfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  HtmlEditorField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'UploadField':
  'prefix': 'uploadfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  UploadField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'setFolderName':
  'prefix': 'setfoldername'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setFolderName(\'${1}\')${0}'

'setAllowedExtensions':
  'prefix': 'setallowedextensions'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setAllowedExtensions(array(${1}))${0}'

'setAllowedFileCategories':
  'prefix': 'setallowedfilecategories'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setAllowedFileCategories(array(${1}))${0}'

'setAllowedMaxFileNumber':
  'prefix': 'setallowedmaxfilenumber'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setAllowedMaxFileNumber(${1:null})${0}'

'setCanUpload':
  'prefix': 'setcanupload'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setCanUpload(${1:true})${0}'

'setCanAttachExisting':
  'prefix': 'setcanattachexisting'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setCanAttachExisting(${1:true})${0}'

'TextField':
  'prefix': 'textfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  TextField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'EmailField':
  'prefix': 'emailfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  EmailField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'ReadonlyField':
  'prefix': 'readonlyfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  ReadonlyField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'NumericField':
  'prefix': 'numericfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  NumericField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'CurrencyField':
  'prefix': 'currencyfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  CurrencyField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'NumericField_Readonly':
  'prefix': 'numericfield_readonly'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  NumericField_Readonly::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'CheckboxField':
  'prefix': 'checkboxfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  CheckboxField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'CheckboxField_Readonly':
  'prefix': 'checkboxfield_readonly'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  CheckboxField_Readonly::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'NullableField':
  'prefix': 'nullablefield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  NullableField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'TextareaField':
  'prefix': 'textareafield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  TextareaField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'setRows':
  'prefix': 'setrows'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setRows(${1})${0}'

'setColumns':
  'prefix': 'setcolumns'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setColumns(${1})${0}'

'TreeDropdownField':
  'prefix': 'treedropdownfield'
  'body': """
  TreeDropdownField::create(
  \t\'${1:name}ID\',
  \t\'${2:${1:title}}\',
  \t\'${3:SiteTree}\'
  )${0}
  """

'TreeDropdownField_Readonly':
  'prefix': 'treedropdownfield_readonly'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  TreeDropdownField_Readonly::create(
  \t\'${1:name}ID\',
  \t\'${2:${1:title}}\',
  \t\'${3:SiteTree}\'
  )${0}
  """

'DropdownField':
  'prefix': 'dropdownfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  DropdownField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \t\'${3:datalist}\'
  )${0}
  """

'setEmptyString':
  'prefix': 'setemptystring'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'setEmptyString(\'${1}\')${0}'

'LookupField':
  'prefix': 'lookupfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  LookupField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \t\'${3:datalist}\'
  )${0}
  """

'ListboxField':
  'prefix': 'listboxfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  ListboxField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \t\'${3:datalist}\'
  )${0}
  """
'GroupedDropdownField':
  'prefix': 'groupeddropdownfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  GroupedDropdownField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \t\'${3:datalist}\'
  )${0}
  """

'OptionsetField':
  'prefix': 'optionsetfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  OptionsetField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \t\'${3:datalist}\'
  )${0}
  """

'CheckboxSetField':
  'prefix': 'checkboxsetfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  CheckboxSetField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \t\'${3:datalist}\'
  )${0}
  """

'HeaderField':
  'prefix': 'headerfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  HeaderField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'HiddenField':
  'prefix': 'hiddenfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  HiddenField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'LabelField':
  'prefix': 'labelfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  LabelField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'GridField':
  'prefix': 'gridfield'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': """
  GridField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \t\\$this->${1}(),
  \t${4:GridFieldConfig_Base::create()}
  )${0}
  """

'GridFieldConfig_Base':
  'prefix': 'gridfieldconfig_base'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'GridFieldConfig_Base::create(${1})${0}'

'GridFieldConfig_RecordEditor':
  'prefix': 'gridfieldconfig_recordeditor'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'GridFieldConfig_RecordEditor::create(${1})${0}'

'GridFieldConfig_RelationEditor':
  'prefix': 'gridfieldconfig_relationeditor'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'GridFieldConfig_RelationEditor::create(${1})${0}'

'GridFieldConfig_RecordViewer':
  'prefix': 'gridfieldconfig_recordviewer'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'GridFieldConfig_RecordViewer::create(${1})${0}'

'addComponent':
  'prefix': 'addcomponent'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'addComponent(${1})${0}'

'removeComponentsByType':
  'prefix': 'removecomponentsbytype'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'removeComponentsByType(${1})${0}'

'GridFieldButtonRow':
  'prefix': 'gridfieldbuttonrow'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'new GridFieldButtonRow(\'before\')'

'GridFieldToolbarHeader':
  'prefix': 'gridfieldtoolbarheader'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': 'new GridFieldToolbarHeader()'

# Images
'Set Size Image':
  'prefix': 'setsize'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'maxVersion': '3.2'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'SetSize(${1:width},${2:${1:height}})${0}'

'Set Ratio Size Image':
  'prefix': 'setratiosize'
  'module': 'silverstripe/framework'
  'minVersion': '3.0'
  'maxVersion': '3.2'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'SetRatioSize(${1:width},${2:${1:height}})${0}'

'Scale Width Image':
  'prefix': 'scalewidth'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'variations': [
    {
      'minVersion': '3.2'
      'body': 'ScaleWidth(${1:width})${0}'
    }
    {
      'minVersion': '3.0'
      'maxVersion': '3.2'
      'body': 'SetWidth(${1:width})${0}'
    }
  ]

'Scale Max Width Image':
  'prefix': 'scalemaxwidth'
  'module': 'silverstripe/framework'
  'minVersion': '3.2'
  'body': 'ScaleMaxWidth(${1:width})${0}'

'Scale Height Image':
  'prefix': 'scaleheight'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'variations': [
    {
      'minVersion': '3.2'
      'body': 'ScaleHeight(${1:height})${0}'
    }
    {
      'minVersion': '3.0'
      'maxVersion': '3.2'
      'body': 'SetHeight(${1:height})${0}'
    }
  ]

'Scale Max Height Image':
  'prefix': 'scalemaxheight'
  'module': 'silverstripe/framework'
  'minVersion': '3.2'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'ScaleMaxHeight(${1:height})${0}'

'Fit Image':
  'prefix': 'fit'
  'module': 'silverstripe/framework'
  'minVersion': '3.2'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'Fit(${1:width},${2:${1:height}})${0}'

'Fit Max Image':
  'prefix': 'fitmax'
  'module': 'silverstripe/framework'
  'minVersion': '3.2'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'FitMax(${1:width},${2:${1:height}})${0}'

'Fill Image':
  'prefix': 'fill'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'variations': [
    {
      'minVersion': '3.2'
      'body': 'Fill(${1:width},${2:${1:height}})${0}'
    }
    {
      'minVersion': '3.0'
      'maxVersion': '3.2'
      'body': 'CroppedImage(${1:width},${2:${1:height}})${0}'
    }
  ]
'Fill Max Image':
  'prefix': 'fillmax'
  'module': 'silverstripe/framework'
  'minVersion': '3.2'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'FillMax(${1:width},${2:${1:height}})${0}'

'Crop Width Image':
  'prefix': 'cropwidth'
  'module': 'silverstripe/framework'
  'minVersion': '3.2'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'CropWidth(${1:width})${0}'

'Crop Height Image':
  'prefix': 'cropheight'
  'module': 'silverstripe/framework'
  'minVersion': '3.2'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'CropHeight(${1:width})${0}'

'Pad Image':
  'prefix': 'pad'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'variations': [
    {
      'minVersion': '3.2'
      'body': 'Pad(${1:width},${2:${1:height}},${3:hex})${0}'
    }
    {
      'minVersion': '3.0'
      'maxVersion': '3.2'
      'body': 'PaddedImage(${1:width},${2:${1:height}},${3:hex})${0}'
    }
  ]

# Convert
'Convert value to XML attribute':
  'prefix': 'convertraw2att'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::raw2att(${1})${0}"
'Convert value to HTML attribute':
  'prefix': 'convertraw2htmlatt'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::raw2htmlatt(${1})${0}"
'Convert value to HTML name':
  'prefix': 'convertraw2htmlname'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::raw2htmlname(${1})${0}"
'Convert value to HTML ID':
  'prefix': 'convertraw2htmlid'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::raw2htmlid(${1})${0}"
'Convert value to XML':
  'prefix': 'convertraw2xml'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::raw2xml(${1})${0}"
'Convert value to javascript':
  'prefix': 'convertraw2js'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::raw2js(${1})${0}"
'Convert value to JSON':
  'prefix': 'convertraw2json'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::raw2json(${1})${0}"
'Convert array to JSON':
  'prefix': 'convertarray2json'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::array2json(${1})${0}"
'Convert value to SQL':
  'prefix': 'convertraw2sql'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::raw2sql(${1})${0}"
'Convert symbolic identifier to SQL':
  'prefix': 'convertsymbol2sql'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::symbol2sql(${1}, ${2:'.'})${0}"
'Convert XML to raw text':
  'prefix': 'convertxml2raw'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::xml2raw(${1})${0}"
'Convert JSON to an object':
  'prefix': 'convertjson2obj'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::json2obj(${1})${0}"
'Convert JSON to an array':
  'prefix': 'convertjson2array'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::json2array(${1})${0}"
'Convert XML to an array':
  'prefix': 'convertxml2array'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::xml2array(${1}, {$2:false}, {$3:false})${0}"
'Convert to link if valid':
  'prefix': 'convertlinkIfMatch'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::linkIfMatch(${1})${0}"
'Convert HTML to plain text':
  'prefix': 'converthtml2raw'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::html2raw(${1})${0}"
'Convert value to url':
  'prefix': 'convertraw2url'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Convert::raw2url(${1})${0}"

# Session
'Set session value':
  'prefix': 'sessionset'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Session::set(\'${1}\', ${2})${0}"
'Get session value':
  'prefix': 'sessionget'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Session::get(\'${1}\')${0}"
'Get all sessions':
  'prefix': 'sessiongetall'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Session::get_all(\'${1}\')${0}"
'Clear session value':
  'prefix': 'sessionclear'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Session::clear(\'${1}\')${0}"
'Clear all sessions':
  'prefix': 'sessionclearall'
  'module': 'silverstripe/framework'
  'scope': '.text.html.php'
  'body': "Session::clear_all(\'${1}\')${0}"

# Director
'Get the root URL':
  'prefix': 'baseurl'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'BaseURL'
    }
    {
      'scope': '.text.html.php'
      'body': "Director::baseURL()"
    }
  ]
'Get the absolute root URL':
  'prefix': 'absolutebaseurl'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'AbsoluteBaseURL'
    }
    {
      'scope': '.text.html.php'
      'body': "Director::absoluteBaseURL()"
    }
  ]

# General variables
'Current Member':
  'prefix': 'member'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'CurrentMember'
    }
    {
      'scope': '.text.html.php'
      'body': 'Member::currentUser()'
    }
  ]

'Current Member ID':
  'prefix': 'memberid'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'CurrentMember.ID'
    }
    {
      'scope': '.text.html.php'
      'body': 'Member::currentUserID()'
    }
  ]

'Current SiteConfig':
  'prefix': 'siteconfig'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'SiteConfig'
    }
    {
      'scope': '.text.html.php'
      'body': 'SiteConfig::current_site_config()'
    }
  ]

'Title':
  'prefix': 'title'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'Title'

'Menu Title':
  'prefix': 'menutitle'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'MenuTitle'

'Content':
  'prefix': 'content'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'Content'

'MetaTags':
  'prefix': 'metatags'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'MetaTags'

'Relative Link':
  'prefix': 'link'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'Link'

'Absolute Link':
  'prefix': 'absolutelink'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'AbsoluteLink'

'isSection Linking Mode':
  'prefix': 'issection'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'isSection'

'isCurrent Linking Mode':
  'prefix': 'iscurrent'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'isCurrent'

'inSection Linking Mode':
  'prefix': 'insection'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'inSection(${1:page-url})${0}'

'URLSegment':
  'prefix': 'urlsegment'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'URLSegment'

'ClassName':
  'prefix': 'classname'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'ClassName'

# Children loop
'Children':
  'prefix': 'children'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'Children'

'ChildrenOf':
  'prefix': 'childrenof'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'ChildrenOf(${1:page-url})${0}'

'AllChildren':
  'prefix': 'allchildren'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'AllChildren'
'Menu':
  'prefix': 'menu'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'Menu(${1:page-url})${0}'

'Page':
  'prefix': 'page'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'Page(${1:page-url})${0}'

'Level':
  'prefix': 'level'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'Level(${1:1})${0}'

'Count':
  'prefix': 'count'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'Count${0}'
    }
    {
      'scope': '.text.html.php'
      'body': 'Count()${0}'
    }
  ]

# Scope traverse
'Traverse Up Scope':
  'prefix': 'up'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'Up'

'Current Object Scope':
  'prefix': 'me'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'Me'

'Top Level Scope':
  'prefix': 'top'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'Top'

# Breadcrumbs
'Breadcrumbs':
  'prefix': 'breadcrumbs'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss'
  'body': 'Breadcrumbs'

# Form
'Form':
  'prefix': 'form'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'Form'
    }
    {
      'scope': '.text.html.php'
      'body': '''
      Form::create(
      \t${0}
      )
      '''
    }
  ]

# Formating
'Limit Word Count':
  'prefix': 'limitwordcount'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'LimitWordCount(${1:26},${2:\'...\'})${0}'

'Limit Characters':
  'prefix': 'limitcharacters'
  'module': 'silverstripe/framework'
  'scope': '.text.html.ss, .text.html.php'
  'body': 'LimitCharacters(${1:20},${2:\'...\'})${0}'

'Escape XML':
  'prefix': 'escapexml'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'EscapeXML'
    }
    {
      'scope': '.text.html.php'
      'body': 'EscapeXML()'
    }
  ]

'First Paragraph':
  'prefix': 'firstparagraph'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'FirstParagraph'
    }
    {
      'scope': '.text.html.php'
      'body': 'FirstParagraph()'
    }
  ]

'No HTML':
  'prefix': 'nohtml'
  'module': 'silverstripe/framework'
  'variations': [
    {
      'scope': '.text.html.ss'
      'body': 'NoHTML'
    }
    {
      'scope': '.text.html.php'
      'body': 'NoHTML()'
    }
  ]

######
#
# TagField
#
######

'TagField':
  'prefix': 'tagfield'
  'module': 'silverstripe/tagfield'
  'scope': '.text.html.php'
  'body': """
  TagField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \t${3:null},
  \t${4}
  )${0}
  """

'StringTagField':
  'prefix': 'stringtagfield'
  'module': 'silverstripe/tagfield'
  'scope': '.text.html.php'
  'body': """
  StringTagField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \t${3:array()},
  \texplode(',', $this->${1:name})
  )${0}
  """

######
#
# Linkable
#
######

'LinkField':
  'prefix': 'linkfield'
  'module': 'sheadawson/silverstripe-linkable'
  'scope': '.text.html.php'
  'body': """
  LinkField::create(
  \t\'${1:name}ID\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'EmbeddedObjectField':
  'prefix': 'embeddedobjectfield'
  'module': 'sheadawson/silverstripe-linkable'
  'scope': '.text.html.php'
  'body': """
  EmbeddedObjectField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \t${3}
  )${0}
  """

######
#
# SortableUploadField
#
######

'SortableUploadField':
  'prefix': 'sortableuploadfield'
  'module': 'bummzack/sortablefile'
  'scope': '.text.html.php'
  'body': """
  SortableUploadField::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

######
#
# Focuspoint
#
######

'Focus Fill Image':
  'prefix': 'focusfill'
  'module': 'jonom/focuspoint'
  'variations': [
    {
      'scope': '.text.html.ss, .text.html.php'
      'minVersion': '2.0'
      'body': 'FocusFill(${1:width},${2:${1:height}})${0}'
    }
    {
      'scope': '.text.html.ss, .text.html.php'
      'maxVersion': '2.0'
      'body': 'CroppedFocusedImage(${1:width},${2:${1:height}})${0}'
    }
  ]
'Focus Fill Max Image':
  'prefix': 'focusfillmax'
  'module': 'jonom/focuspoint'
  'scope': '.text.html.ss, .text.html.php'
  'minVersion': '2.0'
  'body': 'FocusFillMax(${1:width},${2:${1:height}})${0}'

'Focus Crop Width Image':
  'prefix': 'focuscropwidth'
  'module': 'jonom/focuspoint'
  'scope': '.text.html.ss, .text.html.php'
  'minVersion': '2.0'
  'body': 'FocusCropWidth(${1:width})${0}'

'Focus Crop Height Image':
  'prefix': 'focuscropheight'
  'module': 'jonom/focuspoint'
  'scope': '.text.html.ss, .text.html.php'
  'minVersion': '2.0'
  'body': 'FocusCropHeight(${1:width})${0}'

######
#
# Gridfield extensions
#
######

'GridFieldAddExistingSearchButton':
  'prefix': 'gridfieldaddexistingsearchbutton'
  'module': 'silverstripe-australia/gridfieldextensions'
  'scope': '.text.html.php'
  'body': 'new GridFieldAddExistingSearchButton()'

'GridFieldTitleHeader':
  'prefix': 'gridfieldtitleheader'
  'module': 'silverstripe-australia/gridfieldextensions'
  'scope': '.text.html.php'
  'body': 'new GridFieldTitleHeader()'

'GridFieldEditableColumns':
  'prefix': 'gridfieldeditablecolumns'
  'module': 'silverstripe-australia/gridfieldextensions'
  'scope': '.text.html.php'
  'body': 'new GridFieldEditableColumns()'

'GridFieldDeleteAction':
  'prefix': 'gridfielddeleteaction'
  'module': 'silverstripe-australia/gridfieldextensions'
  'scope': '.text.html.php'
  'body': 'new GridFieldDeleteAction()'

'GridFieldAddNewInlineButton':
  'prefix': 'gridfieldaddnewinlinebutton'
  'module': 'silverstripe-australia/gridfieldextensions'
  'scope': '.text.html.php'
  'body': 'new GridFieldAddNewInlineButton()'

'GridFieldAddNewMultiClass':
  'prefix': 'gridfieldaddnewmulticlass'
  'module': 'silverstripe-australia/gridfieldextensions'
  'scope': '.text.html.php'
  'body': 'new GridFieldAddNewMultiClass())'

'GridFieldOrderableRows':
  'prefix': 'gridfieldorderablerows'
  'module': 'silverstripe-australia/gridfieldextensions'
  'scope': '.text.html.php'
  'body': 'new GridFieldOrderableRows(${1:\'Sort\'})${0}'

######
#
# Sortable Gridfield
#
######

'GridFieldSortableRows':
  'prefix': 'gridfieldsortablerows'
  'module': 'undefinedoffset/sortablegridfield'
  'body': 'new GridFieldSortableRows(${1:\'Sort\'})${0}'

######
#
# Better Buttons
#
######

'getBetterButtonsActions':
  'prefix': 'getbetterbuttonsactions'
  'module': 'unclecheese/betterbuttons'
  'scope': '.text.html.php'
  'body': """
  /**
   * Create better button custom actions
   * @return FieldList
   */
  public function getBetterButtonsActions()
  {
  \t\\$fields = parent::getBetterButtonsActions();
  \t\\$fields->${0}
  \treturn \\$fields;
  }
  """

'BetterButtonCustomAction':
  'prefix': 'betterbuttoncustomaction'
  'module': 'unclecheese/betterbuttons'
  'scope': '.text.html.php'
  'body': """
  BetterButtonCustomAction::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\'
  )${0}
  """

'BetterButtonNestedForm':
  'prefix': 'betterbuttonnestedform'
  'module': 'unclecheese/betterbuttons'
  'scope': '.text.html.php'
  'body': """
  BetterButtonNestedForm::create(
  \t\'${1:name}\',
  \t\'${2:${1:title}}\',
  \tFieldList::create(
  \t\t${3}
  \t)
  )${0}
  """

######
#
# Display Logic
#
######

'displayIf Condition':
  'prefix': 'displayif'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "displayIf(${1})${0}"
'displayUnless Condition':
  'prefix': 'displayunless'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "displayUnless(${1})${0}"
'hideIf Condition':
  'prefix': 'hideif'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "hideIf(${1})${0}"
'hideUnless Condition':
  'prefix': 'hideunless'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "hideUnless(${1})${0}"
'isEqualTo Comparison':
  'prefix': 'isequalto'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "isEqualTo(${1})${0}"
'isNotEqualTo Comparison':
  'prefix': 'isnotequalto'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "isNotEqualTo(${1})${0}"
'isGreaterThan Comparison':
  'prefix': 'isgreaterthan'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "isGreaterThan(${1})${0}"
'isLessThan Comparison':
  'prefix': 'islessthan'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "isLessThan(${1})${0}"
'contains Comparison':
  'prefix': 'contains'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "contains(${1})${0}"
'startsWith Comparison':
  'prefix': 'startswith'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "startsWith(${1})${0}"
'endsWith Comparison':
  'prefix': 'endswith'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "endsWith(${1})${0}"
'endsWith Comparison':
  'prefix': 'endswith'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "endsWith(${1})${0}"
'isEmpty Comparison':
  'prefix': 'isempty'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "isEmpty(${1})${0}"
'isNotEmpty Comparison':
  'prefix': 'isnotempty'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "isNotEmpty(${1})${0}"
'isBetween Comparison':
  'prefix': 'isbetween'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "isBetween(${1})${0}"
'isChecked Comparison':
  'prefix': 'ischecked'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "isChecked()${0}"
'isNotChecked Comparison':
  'prefix': 'isnotchecked'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "isNotChecked()${0}"
'hasCheckedOption Comparison':
  'prefix': 'hascheckedoption'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "hasCheckedOption(${1})${0}"
'hasCheckedAtLeast Comparison':
  'prefix': 'hascheckedatleast'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "hasCheckedAtLeast(${1})${0}"
'hasCheckedLessThan Comparison':
  'prefix': 'hascheckedlessthan'
  'module': 'unclecheese/display-logic'
  'scope': '.text.html.php'
  'body': "hasCheckedLessThan(${1})${0}"

######
#
# Lumberjack
#
######

'show_in_sitetree':
  'prefix': 'show_in_sitetree'
  'module': 'silverstripe/lumberjack'
  'scope': '.text.html.php'
  'body': """
  /**
   * Defines whether a page is displayed within the site tree
   * @var boolean
   */
  private static $show_in_sitetree = ${1:false};${0}
  """

'getLumberjackTitle':
  'prefix': 'getLumberjackTitle'
  'module': 'silverstripe/lumberjack'
  'scope': '.text.html.php'
  'body': """
  /**
   * Define the title for the cms lumberjack gridfield.
   *
   * @return string
   */
  public function getLumberjackTitle()
  {
  \treturn \'${1}\';
  }${0}
  """

######
#
# Fluent
#
######

'Translatable db fields':
  'prefix': 'translatefields'
  'module': 'tractorcow/silverstripe-fluent'
  'scope': '.text.html.php'
  'body': """
  /**
   * Defines db fields that are translatable.
   * @var array
   */
  private static $translate = array(
  \t\'${1}\',
  );${0}
  """
